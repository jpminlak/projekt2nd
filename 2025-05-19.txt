현재 필요한 기술: thymeleaf, JPA

JPA - 프로젝트와 DB를 연결하기 위해 필요.
* 기본적인 MVC 패턴은 기존 spring legacy와 같다.
* 무조건 인터페이스가 필요한 건 아니지만, repository에는 인터페이스가 필요하다.
 JPA 형식으로 작성할 경우 인터페이스 클래스 옆에 extend를 써서 여러 개의 인터페이스를 끌어와 쓸 수 있다.
 이렇게 하면 메서드 하나, 명령줄 하나(Optional)로 코드를 줄일 수 있다.
* 계정 루트 디렉토리(메인 메서드가 있는 클래스와 같은 디렉토리)에 해당 기능을 담당하는 Config 클래스를 만들어 repository의 설정을 정의한다.
 이 때 여기서 지정할 bean의 개수는 repository에서 보낼 bean의 개수와 일치해야 한다.
* 서비스 디렉토리의 클래스는 CRUD의 작업을 분류하는 역할을 한다.
 생성은 entity 클래스에, DB에 저장하는 것은 repository에 넘긴다.
 각 작업에 맞는 디렉토리의 클래스에 호출하여 값을 받아내고 이걸 다시 컨트롤러 클래스로 반환한다. 
* entity를 사용하면 DB의 테이블, 쿼리문 생성이 자동으로 이루어진다. (즉, 이는 CRUD 중 C에 해당한다고 볼 수 있다.)
 대표키(@ID), 값 입력과 튜플 생성 선언(@GeneratedValue), 값을 지정된 컬럼으로 인도(@Column) 등의 어노테이션 사용하여 기본적인 CRUD 작업 수행.
 튜플 삽입 시 예외가 발생할 경우 이를 처리.
 entity 생성 후 호출한 클래스로 값을 반환.